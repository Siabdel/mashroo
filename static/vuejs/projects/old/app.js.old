var eventBus = new Vue()
// instance view de propostion DA simulation

//import SearchBox  from './components/SearchBox.vue'
//--------------------------
// composant pour gerer  mes tickets
//--------------------------

var compos_mes_tickets = {
  // OUT : render template
  template : "#mes_tickets_template",
	// data IN
	delimiters: ['[[', ']]'],
	props :  {
		key_search :  "",
    user_id : false,
	},

	data () {
		return {
      titre : "ICI composant actions du projet",
      message : "",
      donnees : [],
      cle : "",
      title : "",
      currentSort : 'title',
			currentSortDir : 'asc',
      pageSize : 25,
	 		currentPage : 1,
      sortBy : "title",
      filterBy : "a",
      ticket_delete : false,
      checked : false,
      active : false,
      showModal : false,
      url_project : `/pro/`,
      url_delete_ticket : `/pro/`,

			}
	},

  created : function() {
    //this.api_reload_tickets(event)
  }, // fin de created

  mounted() {
    //do something after mounting vue instance
    this.api_reload_tickets(event)
  },

  computed:{

    sortedTickets() {
      if (this.donnees.length > 0) {
        //console.log( "SortedTicketsSortBy = ", this.sortBy )
        return this.donnees.filter( ticket  => ticket.title.includes(this.filterBy))
          .sort( (a, b) => {
            a[this.sortBy].localeCompare(b[this.sortBy])
            let modifier = 1
  	        if(this.currentSortDir === 'desc') modifier = -1
  	        if(a[this.currentSort] < b[this.currentSort]) return -1 * modifier
  	        if(a[this.currentSort] > b[this.currentSort]) return 1 * modifier
  	        return 0

          }).filter((row, index) => {
  	        var start = (this.currentPage-1)*this.pageSize
  	        var end = this.currentPage*this.pageSize
  	        if(index >= start && index < end) return true
  					return false
        })
      }
    },

  },

  methods : {
    // toper article selectionner
    api_reload_tickets(event){
      var url = `/pro/api/tickets/${self.project_id}.json/`
      //this.project_id = `${project_id}`
      fetch(url)
       .then(response => response.json())
       .then( json => { this.donnees = json},
         console.log("api retour pour projet = " + this.project_id )
       ).catch((err)=>console.log(err))
    },
  }
}


var compo_actions = {
  // OUT : render template
  template : "#actions_template",
	// data IN
	delimiters: ['[[', ']]'],
	props :  {
		key_search :  "",
    project_id : false,
	},

	data () {
		return {
      titre : "ICI composant actions du projet",
      message : "",
      donnees : [],
      cle : "",
      title : "",
      currentSort : 'title',
			currentSortDir : 'asc',
      pageSize : 25,
	 		currentPage : 1,
      sortBy : "title",
      filterBy : "a",
      ticket_delete : false,
      checked : false,
      active : false,
      showModal : false,
      url_project : `/pro/`,
      url_delete_ticket : `/pro/`,

			}
	},

  created : function() {
    //this.api_reload_tickets(event)
  }, // fin de created

  mounted() {
    //do something after mounting vue instance
    this.api_reload_tickets(event)
  },

  computed:{

    sortedTickets() {
      if (this.donnees.length > 0) {
        //console.log( "SortedTicketsSortBy = ", this.sortBy )
        return this.donnees.filter( ticket  => ticket.title.includes(this.filterBy))
          .sort( (a, b) => {
            a[this.sortBy].localeCompare(b[this.sortBy])
            let modifier = 1
  	        if(this.currentSortDir === 'desc') modifier = -1
  	        if(a[this.currentSort] < b[this.currentSort]) return -1 * modifier
  	        if(a[this.currentSort] > b[this.currentSort]) return 1 * modifier
  	        return 0

          }).filter((row, index) => {
  	        var start = (this.currentPage-1)*this.pageSize
  	        var end = this.currentPage*this.pageSize
  	        if(index >= start && index < end) return true
  					return false
        })
      }
    },
    // --
    sortedTickets2() {

      if (this.donnees.length > 0) {

        return this.donnees.sort((a,b) => {
	        let modifier = 1
	        if(this.currentSortDir === 'desc') modifier = -1
	        if(a[this.currentSort] < b[this.currentSort]) return -1 * modifier
	        if(a[this.currentSort] > b[this.currentSort]) return 1 * modifier
	        return 0
	      }).filter((row, index) => {
	        var start = (this.currentPage-1)*this.pageSize
	        var end = this.currentPage*this.pageSize
	        if(index >= start && index < end) return true
					return false
      })
     }
    },

  }, // fin de computed

  // les methodes
  methods: {
    url_ticket_edit(ticket_id){
      // modifier le ticket
      var url = `/pro/projects/tickets/${ticket_id}/`
      return url
    },

    url_ticket_show(ticket_id){
      // modifier le ticket
      var url = `/pro/projects/tickets/${ticket_id}/edit/`
      return url
    },


    // toper article selectionner
    api_reload_tickets(event){
      var url = `/pro/api/tickets/${this.project_id}.json/`
      //this.project_id = `${project_id}`
      fetch(url)
       .then(response => response.json())
       .then( json => { this.donnees = json},
         console.log("api retour pour projet = " + this.project_id )
       ).catch((err)=>console.log(err))
    },
    // sort
    // tri
    sort:function(elem) {
      console.log("sort by me !!" + elem )
      //if s == current sort, reverse
      if(elem === this.currentSort) {
       this.currentSortDir = this.currentSortDir==='asc'?'desc':'asc'
      }
      this.currentSort = elem
    },
    // paginator
    nextPage() {
      if((this.currentPage*this.pageSize) < this.donnees.length) this.currentPage++
      console.log( "next page  = ", this.currentPage++ )
    },

    prevPage() {
      if(this.currentPage > 1) this.currentPage--
    },

    // les tickets qui correspondent a la cle de reherche
    api_filter_tickets(search_key){
      //pro/api/member/ab.json
      var url = `/pro/api/ticket/${search_key}.json`

      fetch(url)
        .then( reponse => reponse.json() )
        .then( result => {
          this.donnees = result
          //console.log("api_filter_tickets = " + url)
        })
        .catch((err)=>console.log(err))
    },
  },
}// fin de comppsant ticket

//--------------------------
// register modal component
//--------------------------

Vue.component('modal', {
  template: '#modal-template',
  methods: {
     emitValidationDa(id) {
          console.info("validation emit  **" + id)
          //eventBus.$emit("validation", id)
          this.valider_ligne_user(id)
      },

      // API valider_ligne_user
      valider_ligne_user(da_id){
          // envoie de la validation
          var url = `/da/cart/validateda/${da_id}/`
          fetch(url).then(
           function (response) {
              console.log("valider_ligne_user excuter !!" + response)
              // redirect
              //location.href = "/da/cac/list/"
              location.replace("/da/cac/list/")
              return  response
          }).catch((err)=>console.error(err))

       },
    },

})

Vue.filter('arrondi', function (value, number) {
  return parseFloat(value.toFixed(number))
})

Vue.filter('formatDate', function(value) {
  if (value) {
    return moment(String(value)).format('DD/MM/YYYY HH:mm')
  }
});

Vue.filter('reverse', function (value) {
  return value.split('').reverse().join('')
})

Vue.filter('substr', function (value, pos) {
  return value.slice(0, pos)
})

var vm2 = new Vue({
    el: '#app',
    delimiters: ['[[', ']]'],
    components : {
      componentickets : compo_actions ,
      componentMestickets : compos_mes_tickets,
    },
    data : {
      message : "***  ici App project details  !!! ***",
      project_id : "",
      errors: [],
      toggle:true,
      selected : "",
      isActive : true,
      show_create : false,
      show_list : true,
      transition_select: 'fade',
      showModal: false,
    },  //

    ///
    mounted() {
      //do something after mounting vue instance
      // var url = `/api/projects/${project_id}/etapes`
      //this.api_reload_tickets(event);
    },

    ///
    computed: {
        // un accesseur (getter) calculÃ©
        reloadTicket: function () {
          // `this` pointe sur l'instance vm
          //this.api_reload_tickets(event);
          return this.tasks
        }
      },

      methods: {
        // ---
        add_etape_project(event, project_id) {
          //var url = `/pro/api/add_etape_project/${project_id}`
          if (! this.checkTicketForm()) {
            return false
          }
          var url = `/pro/api/tickets/`
          var cle_csrf = $( "input[name='csrfmiddlewaretoken']" ).val()

          data_project = {
            'project' : project_id,
            'sequence' : this.code,
            'title' : this.title,
            'description' : this.description,
            'author' : this.author,
            'assignee' : this.assignee,
            'csrfmiddlewaretoken' : cle_csrf ,
          }
          form = $( "#form_task" ).serialize()
          ///QueryDict: {u'comment': [u'ZZZZZZZZZZZZZ'], u'csrfmiddlewaretoken': [u'DMbU0yI7I9lVACrt7agLPHu9bzkMoektWe7sd1N85rVvfbRk60rNEJZ10ntNESoF']}
          js_userta = JSON.stringify(data_project) // on

        fetch(url,
          {
          method : 'POST',
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            'Accept': 'application/json',
            'X-CSRFToken': cle_csrf,

          },
          //body : JSON.stringify({'comment' : 'wwwwwwwwwwwww' }),
          body : form,


      		}).then(response => console.log(response))
            .then( function (response) {
               //location.replace("/da/cac/list/")
               $(event.target).toggleClass("btn-warning")
               return  response
          }).catch((err)=>console.log( err))

          console.log("apres fetch add_etape_project !!" + cle_csrf)

        },

        // validation form
        checkTicketForm: function (e) {
          console.log("check ticket   " + this.ticket.title  + this.sequence)

          if (this.ticket.title && this.ticket.sequence) {
            console.log("check ticket form  ok " + e)
            return true;
          }

          this.errors = [];

          if (!this.ticket.title) {
            this.errors.push('saisie titre obligatoire.');
          }
          if (!this.ticket.sequence) {
            this.errors.push('sequence requise.');
          }
          //e.preventDefault();
          }


          },
    })

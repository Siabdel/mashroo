# Generated by Django 2.2.13 on 2020-11-24 11:52

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('profile', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
        ('todo', '0001_initial'),
        ('taggit', '0002_auto_20150616_2121'),
        ('notifications', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('taxonomy', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DjangoClient',
            fields=[
                ('codeclie', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('nomclie', models.CharField(max_length=45)),
                ('codpost', models.CharField(blank=True, max_length=5, null=True)),
                ('ville', models.CharField(blank=True, max_length=20, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('pays', models.CharField(blank=True, max_length=20, null=True)),
                ('exig_pharma', models.BooleanField(default=False)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True)),
                ('invite_reason', models.CharField(max_length=64)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profile.UProfile')),
            ],
        ),
        migrations.CreateModel(
            name='MilestoneAdmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(verbose_name='code')),
                ('title', models.CharField(max_length=100, verbose_name='title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('status', models.CharField(choices=[('OPEN', 'open'), ('CLOSED', 'closed')], default='OPEN', max_length=10, verbose_name='status')),
                ('visibilite', models.CharField(choices=[('P', 'Projet Public'), ('I', 'Projet interne'), ('C', 'Projet lié à un client'), ('V', 'Projet privé seulement au abonnés')], default='Projet Public', max_length=100, verbose_name='visiblite')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('due_date', models.DateTimeField(verbose_name="date d'echeance")),
                ('closed', models.DateTimeField(blank=True, null=True, verbose_name='closed on')),
                ('date_debut', models.DateTimeField(verbose_name='date debut')),
                ('date_fin', models.DateTimeField(blank=True, null=True, verbose_name='date debut')),
                ('comment', models.TextField(blank=True, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_projects', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mes_projects', to='taxonomy.Category', verbose_name='categories')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_projects', to=settings.AUTH_USER_MODEL, verbose_name='project manager')),
                ('participants', models.ManyToManyField(through='projects.Membership', to='profile.UProfile', verbose_name='Participants')),
                ('stream', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='notifications.Stream', verbose_name='stream')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vtodo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('completed', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_toto', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveIntegerField(verbose_name='sequence')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('description', models.TextField(help_text='Use <a href="http://daringfireball.net/projects/markdown/syntax">MarkDown syntax</a>.', verbose_name='description')),
                ('type', models.CharField(choices=[('ACTION', 'action'), ('TASK', 'task'), ('IDEE', 'idee')], default='ACTION', max_length=20, verbose_name='type')),
                ('urgency', models.CharField(choices=[('FAIBLE', 'pas important pas urgent'), ('CRITIQUE', 'important et pas Urgent'), ('MOYEN', 'uregnt et pas importance'), ('URGENT', 'Urgent et Important')], default='MOYEN', max_length=20, verbose_name='urgency')),
                ('status', models.CharField(choices=[('NOUVEAU', 'nouveau'), ('ENCOURS', 'encours'), ('RESOLUE', 'resolue'), ('CLOTUREE', 'cloturee'), ('ANNULEE', 'annulee'), ('ENATTENTE', 'en attente')], default='NOUVEAU', max_length=20, verbose_name='status')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified on')),
                ('closed', models.DateTimeField(blank=True, null=True, verbose_name='closed on')),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('schedule_date', models.DateTimeField(blank=True, null=True)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='assigned to')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tickets', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mes_tickets', to='taxonomy.Category', verbose_name='categorie')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='projects.Ticket')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='projects.Project', verbose_name='project')),
                ('stream', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='notifications.Stream', verbose_name='stream')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('tasks', models.ManyToManyField(blank=True, to='todo.Task', verbose_name='related tasks')),
            ],
            options={
                'verbose_name': 'ticket',
                'verbose_name_plural': 'tickets',
                'ordering': ('project', '-sequence'),
                'permissions': [('change_assignee', 'Can change assignee')],
            },
        ),
        migrations.CreateModel(
            name='Partenaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tiers_id', models.CharField(max_length=3)),
                ('tiers_name', models.CharField(max_length=100)),
                ('tiers_type', models.CharField(choices=[('C', 'Client'), ('F', 'Fornisseur')], default='C', max_length=1)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(max_length=100, verbose_name='code')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('deadline', models.DateTimeField(blank=True, null=True, verbose_name='deadline')),
                ('closed', models.DateTimeField(blank=True, null=True, verbose_name='closed on')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_milestones', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('categories', models.ManyToManyField(blank=True, to='taxonomy.Category', verbose_name='categories')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_milestones', to=settings.AUTH_USER_MODEL, verbose_name='manager')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.Project', verbose_name='project')),
            ],
            options={
                'verbose_name': 'milestone',
                'verbose_name_plural': 'milestones',
                'ordering': ['project', 'deadline', 'code'],
            },
        ),
        migrations.AddField(
            model_name='membership',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.Project'),
        ),
    ]
